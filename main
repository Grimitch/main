#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <thread>
#include <chrono>
#include <cstdlib>
#include <ctime>

using namespace std;
class Animal {
protected:
    string name;
    int weight;
    int life;
public:
    Animal(string n, int w, int l = 100) : name(n), weight(w), life(l) {}
    virtual ~Animal() = default;
    virtual string getType() const = 0;
    bool isAlive() const { return life > 0; }
    int getWeight() const { return weight; }
    string info() const {
        return getType() + " \"" + name + "\": Weight=" + to_string(weight) +
               ", Life=" + to_string(life) +
               ", Alive=" + (isAlive() ? "true" : "false");
    }
};

class Herbivore : public Animal {
public:
    Herbivore(string n, int w) : Animal(n, w) {}

    virtual void eatGrass() {
        if (!isAlive()) return;
        weight += 10;
        cout << getType() << " \"" << name << "\" їсть траву. Вага -> " << weight << endl;
    }
};

class Carnivore : public Animal {
protected:
    int power;
public:
    Carnivore(string n, int w, int p) : Animal(n, w), power(p) {}
    virtual void eat(Herbivore* prey) {
        if (!isAlive()) {
            cout << getType() << " \"" << name << "\" мертвий і не може полювати." << endl;
            return;
        }
        if (prey == nullptr) {
            cout << getType() << " \"" << name << "\" не знайшов здобич." << endl;
            return;
        }
        if (!prey->isAlive()) {
            cout << getType() << " \"" << name << "\" знаходить мертву здобич \"" << prey->info() << "\"" << endl;
            return;
        }

        cout << getType() << " \"" << name << "\" атакує " << prey->getType()
             << " \"" << prey->info() << "\"..." << endl;

        if (power > prey->getWeight()) {
            cout << "Перемога! " << getType() << " \"" << name
                 << "\" з'їв " << prey->getType() << " \"" << prey->info() << "\"." << endl;
            power += 10;
            prey->~Herbivore();
        } else {
            power = max(0, power - 10);
            cout << "Невдача! " << getType() << " \"" << name << "\" втратив силу -> " << power << endl;
        }
    }

    string info() const {
        return getType() + " \"" + name + "\": Weight=" + to_string(weight) +
               ", Power=" + to_string(power) +
               ", Life=" + to_string(life) +
               ", Alive=" + (isAlive() ? "true" : "false");
    }
};

class Antilopa : public Herbivore {
public:
    Antilopa(string n, int w) : Herbivore(n, w) {}
    string getType() const override { return "Antilopa"; }
};

class Bison : public Herbivore {
public:
    Bison(string n, int w) : Herbivore(n, w) {}
    string getType() const override { return "Bison"; }
};

class Lion : public Carnivore {
public:
    Lion(string n, int w, int p) : Carnivore(n, w, p) {}
    string getType() const override { return "Lion"; }
};

class Wolf : public Carnivore {
public:
    Wolf(string n, int w, int p) : Carnivore(n, w, p) {}
    string getType() const override { return "Wolf"; }
};

class Continent {
protected:
    string continentName;
    vector<shared_ptr<Animal>> residents;
public:
    Continent(string n) : continentName(n) {}
    virtual ~Continent() = default;

    virtual void populate() = 0;

    void printResidents() const {
        cout << "Континент: " << continentName << endl;
        for (auto& a : residents)
            cout << "  - " << a->info() << endl;
    }
};

class Africa : public Continent {
public:
    Africa() : Continent("Africa") {}
    void populate() override {
        residents.clear();
        residents.push_back(make_shared<Antilopa>("Ant_A1", rand() % 50 + 30));
        residents.push_back(make_shared<Antilopa>("Ant_A2", rand() % 50 + 30));
        residents.push_back(make_shared<Bison>("Bison_A1", rand() % 400 + 300));
        residents.push_back(make_shared<Lion>("Lion_A1", rand() % 100 + 150, rand() % 70 + 60));
        residents.push_back(make_shared<Wolf>("Wolf_A1", rand() % 60 + 50, rand() % 60 + 40));
    }
};

class NorthAmerica : public Continent {
public:
    NorthAmerica() : Continent("North America") {}
    void populate() override {
        residents.clear();
        residents.push_back(make_shared<Bison>("Bison_N1", rand() % 400 + 300));
        residents.push_back(make_shared<Bison>("Bison_N2", rand() % 400 + 300));
        residents.push_back(make_shared<Antilopa>("Ant_N1", rand() % 50 + 30));
        residents.push_back(make_shared<Lion>("Lion_N1", rand() % 100 + 150, rand() % 70 + 60));
        residents.push_back(make_shared<Wolf>("Wolf_N1", rand() % 60 + 50, rand() % 60 + 40));
    }
};

class AnimalWorld {
private:
    vector<shared_ptr<Herbivore>> herbivores;
    vector<shared_ptr<Carnivore>> carnivores;
    vector<shared_ptr<Animal>> animals;
    vector<shared_ptr<Continent>> continents;

public:
    AnimalWorld() {
        srand(time(nullptr));
        continents.push_back(make_shared<Africa>());
        continents.push_back(make_shared<NorthAmerica>());

        for (auto& c : continents)
            c->populate();

        generateArrays();
    }

    void generateArrays() {
        herbivores.clear();
        carnivores.clear();
        animals.clear();

        for (int i = 0; i < 5; i++) {
            if (rand() % 2 == 0)
                herbivores.push_back(make_shared<Antilopa>("Ant_" + to_string(i + 1), rand() % 90 + 30));
            else
                herbivores.push_back(make_shared<Bison>("Bison_" + to_string(i + 1), rand() % 400 + 300));
        }

        for (int i = 0; i < 5; i++) {
            if (rand() % 2 == 0)
                carnivores.push_back(make_shared<Lion>("Lion_" + to_string(i + 1), rand() % 80 + 150, rand() % 60 + 60));
            else
                carnivores.push_back(make_shared<Wolf>("Wolf_" + to_string(i + 1), rand() % 60 + 50, rand() % 40 + 40));
        }

        for (int i = 0; i < 10; i++) {
            int t = rand() % 4;
            if (t == 0)
                animals.push_back(make_shared<Antilopa>("AntMix_" + to_string(i + 1), rand() % 90 + 30));
            else if (t == 1)
                animals.push_back(make_shared<Bison>("BisonMix_" + to_string(i + 1), rand() % 400 + 300));
            else if (t == 2)
                animals.push_back(make_shared<Lion>("LionMix_" + to_string(i + 1), rand() % 80 + 150, rand() % 60 + 60));
            else
                animals.push_back(make_shared<Wolf>("WolfMix_" + to_string(i + 1), rand() % 60 + 50, rand() % 40 + 40));
        }
    }

    void printReport() {
        cout << "\n--- Травоїдні ---" << endl;
        for (auto& h : herbivores)
            cout << h->info() << endl;

        cout << "\n--- Хижаки ---" << endl;
        for (auto& c : carnivores)
            cout << c->info() << endl;
    }

    void runSimulation(int steps = 5) {
        cout << "\n=== Початок симуляції ===" << endl;

        for (int s = 1; s <= steps; s++) {
            cout << "\n--- Крок " << s << " ---" << endl;

            for (auto& h : herbivores) {
                if (rand() % 100 < 60)
                    h->eatGrass();
            }

            for (auto& c : carnivores) {
                vector<Herbivore*> live;
                for (auto& h : herbivores)
                    if (h->isAlive()) live.push_back(h.get());

                if (!live.empty()) {
                    Herbivore* prey = live[rand() % live.size()];
                    c->eat(prey);
                }
            }

            cout << "\nСтан масиву тварин:" << endl;
            for (size_t i = 0; i < animals.size(); i++)
                cout << "[" << i << "] " << animals[i]->info() << endl;

            this_thread::sleep_for(chrono::milliseconds(700));
        }

        cout << "\n=== Кінець симуляції ===" << endl;
    }

    void printContinents() {
        for (auto& c : continents)
            c->printResidents();
    }
};

int main() {
    setlocale(LC_ALL, "uk_UA.UTF-8");
    AnimalWorld world;
    cout << "Початковий стан континентів:" << endl;
    world.printContinents();
    world.printReport();
    world.runSimulation(6);
    cout << "\nФінальний звіт:" << endl;
    world.printReport();
    cout << "\nНатисніть Enter, щоб завершити..." << endl;
    cin.get();
    return 0;
}
